#!/bin/bash

source ./aws_credentials.sh

# help text displayed at various times to guide user how to invoke the bash script
helptext="$(basename "$0") [-h] [-f p v] -- program to get burned in watermark hls videos with master list with ffmpeg
e.g mutliple word argument processor:
time bash encoding_script_watermarked.sh --projectid="3631" --videoid="3798" --videofile="3631_6.mp4" -server="your_bucket"
with log files:
9time bash encoding_script_watermarked.sh -p="3631" -m="3799" -v="3800" -f="3631_6.mp4" -b="0:00:52.254" -i="0:00:17.418" -z="0:00:17.433" -a="5" -c="6" -w="this is test watermark text" -s="your_bucket") 2>> encoding_logs.log
where:
    -h  show this help text
    -f  link to video, file name
    -p  project id
    -s  server
    -b  burned watermark end time
    -a  burned watermakr position
    -w  watermakr text
    -m  mother video id
    -v  video id"

#for parsing command line arguments
#Display message incase no arguments are supplied
if [[ $# -eq 0 ]] ; then
    echo "please provide necessary arguments check help text for guidance:" >> encoding_logs.log
    echo $helptext >> encoding_logs.log
    exit 0
fi

for i in "$@"
do
case $i in
    -f=*|--videofile=*)
    INPUT_VIDEO_FILE_KEY="${i#*=}"
    shift # past argument=value
    ;;
    -p=*|--projectid=*)
    INPUT_PROJECT_ID="${i#*=}"
    shift # past argument=value
    ;;
    -v=*|--videoid=*)
    INPUT_VIDEO_ID="${i#*=}"
    shift # past argument=value
    ;;
    -b=*|--burnedendtime=*)
    INPUT_BURNED_END_TIME="${i#*=}"
    shift # past argument=value
    ;;
    -a=*|--burnedposition=*)
    INPUT_BURNED_POSITION="${i#*=}"
    shift # past argument=value
    ;;
    -w=*|--watermarktext=*)
    INPUT_WATERMARK_TEXT="${i#*=}"
    shift # past argument=value
    ;;
    -m=*|--mothervideoid=*)
    INPUT_MOTHER_VIDEO="${i#*=}"
    shift # past argument=value
    ;;
    -s=*|--server=*)
    SERVER="${i#*=}"
    shift # past argument=value
    ;;
    --default)
    DEFAULT=YES
    shift # past argument with no value
    ;;
    *)
    echo 'please provide correct arguments check help text for guidance:'
    echo $helptext
    exit 0
    ;;
esac
done
{
#print the argumnets read
echo "INPUT VIDEO FILE  = ${INPUT_VIDEO_FILE_KEY}"
echo "INPUT PROJECT ID  = ${INPUT_PROJECT_ID}"
echo "INPUT VIDEO ID   = ${INPUT_VIDEO_ID}"
echo "INPUT MOTHER VIDEO ID   = ${INPUT_MOTHER_VIDEO}"
echo "SERVER NAME   = ${SERVER}"

#for dynamically creating .ass file
echo "INPUT BURNED WATERMARK END TIME     = ${INPUT_BURNED_END_TIME}"
echo "INPUT BURNED WATERMARK POSITION     = ${INPUT_BURNED_POSITION}"
echo "INPUT WATERMARK TEXT  = ${INPUT_WATERMARK_TEXT}"

#setting the values for script as per input values
export PROJECT_ID=${INPUT_PROJECT_ID}
export VIDEO_ID=${INPUT_VIDEO_ID}
export SERVER_NAME=${SERVER}
export INPUT_LINK=${INPUT_VIDEO_FILE_KEY}
export MOTHER_VIDEO_ID=${INPUT_MOTHER_VIDEO}

#for dynamically creating .ass file
export BURNED_END_TIME=${INPUT_BURNED_END_TIME}

export BURNED_POSITION=${INPUT_BURNED_POSITION}
export WATERMARK_TEXT=${INPUT_WATERMARK_TEXT}

#creating .ass file dynamically for generating different watermarks and it also gives on control on styling as mentioned below
cat << EOF > "dynamic_subtitle_"$VIDEO_ID".ass"
[Script Info]
; Script generated by FFmpeg/Lavc57.24.103
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&H99999999,&H99999999,&H0,&H0,0,0,0,0,100,100,0,0,1,0,0,$BURNED_POSITION,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,$BURNED_END_TIME,Default,,0,0,0,,$WATERMARK_TEXT
EOF

echo "copying original from s3 ..." >> encoding_logs.log

#download the file from s3 and parse it for name, for now assuming that the file is mp4
(time aws s3 cp s3://$SERVER_NAME/$PROJECT_ID/video/$INPUT_LINK . ) &>> encoding_logs.log

#set downloaded file as the input for transcoding
export INPUT_VIDEO_FILE=$INPUT_LINK

#check if all the necessary arguments are present, note spacing is important in bash ( as Bash uses spaces to tokenise scripts)
if [[ PROJECT_ID != "" && VIDEO_ID != "" && INPUT_VIDEO_FILE != "" && SERVER_NAME != "" ]]
then

#starting notifications
echo "The ffmpeg encoding is starting \n"
echo "encoding for $PROJECT_ID for video id $VIDEO_ID has beengg started using input file $INPUT_VIDEO_FILE  \n" >> encoding_logs.log
#for -profile:v details are here- https://trac.ffmpeg.org/wiki/Encode/H.264, for other options check, ffmpeg -h
echo "temp directory for video to be saved in s3_temp/your_bucket/$PROJECT_ID/videos/$VIDEO_ID/" >> encoding_logs.log
#make directory if not present
mkdir -p "s3_temp/your_bucket/$PROJECT_ID/videos/$VIDEO_ID/"

#360 version
echo ffmpeg -i $INPUT_VIDEO_FILE -profile:v baseline -level 4.0 -vf "scale=-2:360,subtitles='dynamic_subtitle_'$VIDEO_ID'.ass':force_style='FontName=Aaargh/Aaargh.ttf,PrimaryColour=&H664c4c4c"  -start_number 0 -hls_time 10 -hls_list_size 0 -f hls s3_temp/your_bucket/$PROJECT_ID/videos/$VIDEO_ID/$VIDEO_ID"_360_.m3u8"

echo "starting encoding ..." >> encoding_logs.log

#360 version
(time ffmpeg -i $INPUT_VIDEO_FILE -profile:v baseline -level 4.0 -vf "scale=-2:360,subtitles='dynamic_subtitle_'$VIDEO_ID'.ass':force_style='FontName=Aaargh/Aaargh.ttf,PrimaryColour=&H664c4c4c"  -start_number 0 -hls_time 10 -hls_list_size 0 -f hls s3_temp/your_bucket/$PROJECT_ID/videos/$VIDEO_ID/$VIDEO_ID"_360_.m3u8" && echo "360 version:" >> encoding_logs.log ) 2>> encoding_logs.log &

#480 version
(time ffmpeg -i $INPUT_VIDEO_FILE -profile:v baseline -level 4.0 -vf "scale=-2:480,subtitles='dynamic_subtitle_'$VIDEO_ID'.ass':force_style='FontName=Aaargh/Aaargh.ttf,PrimaryColour=&H664c4c4c"  -start_number 0 -hls_time 10 -hls_list_size 0 -f hls s3_temp/your_bucket/$PROJECT_ID/videos/$VIDEO_ID/$VIDEO_ID"_480_.m3u8"  && echo "480 version" >> encoding_logs.log) 2>> encoding_logs.log &

#720 version
(time ffmpeg -i $INPUT_VIDEO_FILE -profile:v baseline -level 4.0 -vf "scale=-2:720,subtitles='dynamic_subtitle_'$VIDEO_ID'.ass':force_style='FontName=Aaargh/Aaargh.ttf,PrimaryColour=&H664c4c4c"  -start_number 0 -hls_time 10 -hls_list_size 0 -f hls s3_temp/your_bucket/$PROJECT_ID/videos/$VIDEO_ID/$VIDEO_ID"_720_.m3u8" && echo "720 version" >> encoding_logs.log ) 2>> encoding_logs.log &

#1080 version
(time ffmpeg -i $INPUT_VIDEO_FILE -profile:v baseline -level 4.0 -vf "scale=-2:1080,subtitles='dynamic_subtitle_'$VIDEO_ID'.ass':force_style='FontName=Aaargh/Aaargh.ttf,PrimaryColour=&H664c4c4c"  -start_number 0 -hls_time 10 -hls_list_size 0 -f hls s3_temp/your_bucket/$PROJECT_ID/videos/$VIDEO_ID/$VIDEO_ID"_1080_.m3u8" && echo "1080 version" >> encoding_logs.log ) 2>> encoding_logs.log &

echo "The ffmpeg encoding has ended\n" >> encoding_logs.log

#creating a master playlist for hls videos for adaptive streaming
cat << EOF > "s3_temp/your_bucket/"$PROJECT_ID/videos/$VIDEO_ID/master_$PROJECT_ID"_"$VIDEO_ID".m3u8"
#EXTM3U
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1128000,RESOLUTION=640x360,CODECS="avc1.42001e,mp4a.40.2"
${VIDEO_ID}_360_.m3u8
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1803000,RESOLUTION=854x480,CODECS="avc1.42001f,mp4a.40.2"
${VIDEO_ID}_480_.m3u8
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=3138000,RESOLUTION=1280x720,CODECS="avc1.42001f,mp4a.40.2"
${VIDEO_ID}_720_.m3u8
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=4865000,RESOLUTION=1920x1080,CODECS="avc1.420028,mp4a.40.2"
${VIDEO_ID}_1080_.m3u8
EOF

#uploading files to s3
echo "uploading processed files to s3 ..." >> encoding_logs.log
(time aws s3 cp s3_temp/$SERVER_NAME/$PROJECT_ID/videos/$VIDEO_ID/ s3://$SERVER_NAME/$PROJECT_ID/video/$MOTHER_VIDEO_ID/$VIDEO_ID/ --recursive) 2>> encoding_logs.log


else

echo "Please provide the necessart arguments"
echo $helptext >> encoding_logs.log

fi
} || {

echo "some error occured while runing transcoding bash script"

}
